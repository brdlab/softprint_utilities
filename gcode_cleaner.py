from datetime import datetime
import os
import time
import shutil
import math

def gcode_length(fname):
	count = 0
	with open(fname, 'r') as f1:
		for line in f1:
			count += 1
	f1.close()
	return count

def gcode_folder(fname):
	dt_string = datetime.today().strftime("%Y%m%d")
	dir_path = ".\\Generated Gcodes\\"+dt_string+"\\"
	if not os.path.exists(dir_path):
		os.makedirs(dir_path)
	if not os.path.isfile(dir_path+fname):
		shutil.copy(fname, dir_path)
	os.chdir(dir_path)
	cur_dir = os.getcwd()
	print("Saving Gcodes to:\n", cur_dir)

def gcode_extract(fname1, fname2, lower, upper):
	f1 = open(fname1, 'r')
	f2 = open(fname2, 'a+')
	count1 = count2 = 0
	for line in f1:
		count1 += 1
		if (count1>=lower and count1<=upper):
			f2.write(line)
			count2 += 1
		else:
			continue
	f2.write("M9\n")
	print(count2, "of ", count1, " lines copied to cleaned gcode file.")
	f1.close()
	f2.close()

def gcode_line_num(fname, key):
	count = 0
	with open(fname, 'r') as f1:	
		for line in f1:
			count += 1
			if key in line:
				break
			else:
				continue
		f1.close()
		return count

def gcode_headers(fname):
	f2 = open(fname, 'w+')
	now = datetime.now()
	dt_string = now.strftime("%d/%m/%Y %H:%M:%S")
	f2.write("; GCode generated by python script on "+dt_string+"\n")

	f2.write("G21 ; set units to millimeters\n")
	f2.write("G90 ; use absolute coordinates\n")
	f2.write("M82 ; use absolute distances for extrusion\n")
	f2.write("G92 E0 ; reset extrusion distance\n\n")
	f2.close()

def gcode_footers(fname):
	f2 = open(fname, 'a+')
	f2.write("M9\n")
	f2.write("G1 Z10 F480.00\n")
	f2.write("G92 E0 ; reset extrusion distance\n")
	f2.write("G91   ;\n")
	f2.write("G90            ; absolute\n")
	f2.write("G28 X0 Y0  ; home X axis\n")
	f2.write("G92 X0 Y0 ; confirm we are at zero\n")
	f2.write("M84            ; disable motors\n")
	f2.write("M30           ; End ofprogram\n")
	f2.write("M104 S0 ; turn off temperature\n")
	f2.write("G28 X0  ; home X axis\n")
	f2.write("M84     ; disable motors\n")
	f2.close()

def gcode_line_parse(line):
	# Line format : G1 X43.909 Y78.008 E2.11939 ; infill
	splits = line.split(' ')
	x = float(splits[1][1:])
	y = float(splits[2][1:])
	return [x,y]

def gcode_line_inc(line1, line2):
	p1 = gcode_line_parse(line1)
	p2 = gcode_line_parse(line2)
	x1 = p1[0]
	y1 = p1[1]
	x2 = p2[0]
	y2 = p2[1]
	return math.sqrt((x2-x1)**2+(y2-y1)**2)

def gcode_replace(fname, fname2, key1, key2, key3, key4, height, min_retract_disp):
	f1 = open(fname, 'r')
	f2 = open(fname2, 'w+')
	layer_count = 0
	ret_count = 0
	unret_count = 0
	previous = ''
	for line in f1:

		if key1 in line:
			# New Z layer
			layer_count += 1
			line_rep = "G1 Z10 F480.00 ; move to layer ("+str(layer_count)+")\n"
			f2.write(line_rep)
			ret_count = 0
			unret_count = 0
			continue

		if key2 in line:
			# Skip first retract, change gcode for subsequent retracts
			if ret_count==0:
				ret_count += 1
				continue
			else:
				line_rep = "M9 ; stop dispensing\nG1 Z5 F480.00 ; retract needle\n"
				f2.write(line_rep)
				ret_count += 1
				continue

		if key3 in line:
			# Pause only for first unretract, no pause for subsequent unretracts
			if unret_count==0:
				layer_h = layer_count*height
				line_rep = "G1 Z"+str(layer_h)+" F480.00 ; unretract needle\nM0 ; pause print\nM7 ; start dispensing\n"
				f2.write(line_rep)
				unret_count += 1
				continue
			else:
				layer_h = layer_count*height
				line_rep = "G1 Z"+str(layer_h)+" F480.00 ; unretract needle\nM7 ; start dispensing\n"
				f2.write(line_rep)
				unret_count += 1
				continue

		if key4 in line:
			layer_h = layer_count*height
			if "G92" not in previous:
				disp = gcode_line_inc(previous, line)
				if disp < min_retract_disp:
					continue
				else:
					line_rep = "M9 ; stop dispensing\nG1 Z5 F480.00 ; retract needle\n"+line+"G1 Z"+str(layer_h)+" F480.00 ; unretract needle\nM7 ; start dispensing\n"
					f2.write(line_rep)
					continue
			else:
				f2.write(line)
				continue
		else:
			f2.write(line)
		previous = line
	f1.close()
	f2.close()

print("Enter name of raw file:")
raw = input()
fname_1 = raw.capitalize()+"_raw.gcode"
gcode_folder(fname_1)
fname_t = raw.capitalize()+"_temp.gcode"
fname_2 = raw.capitalize()+"_clean.gcode"

print(fname_1, "has a total of ", gcode_length(fname_1), " lines.\n")

print("Do you want to extract a layer from gcode? (y/N):")
ex_choice = input()

# Extracting
if ex_choice == "y" or ex_choice =="Y":
	print("Enter layer number:" )
	layer = int(input())
	print("Number of times to repeat layer number", str(layer), "in Z:")
	rep = int(input())

	# Adding headers to temp file
	gcode_headers(fname_t)

	# Adding repeated sliced sections to temp file
	key1 = " ; move to next layer ("+str(layer-1)+")"
	lower = gcode_line_num(fname_1,key1)
	key2 = " ; move to next layer ("+str(layer)+")"
	upper = (gcode_line_num(fname_1,key2))-1

	print("\nSlicing between lines ", lower, " and ", upper, "\n")
	print("Adding lines to temporary gcode\n")

	for i in range(rep):
		gcode_extract(fname_1, fname_t, lower, upper)
		print("Added layer repeat ", i+1)

	# Adding footers
	gcode_footers(fname_t)

key3 = " ; move to next layer"
key4 = " ; retract extruder"
key5 = " ; unretract extruder"
key6 = " ; move to first infill point"

# Height of layer in mm
height = 0.5
# Removes random un-retracted movements
min_retract_disp = 0.5

if ex_choice=="y" or ex_choice=="Y":
	source = fname_t
else:
	source = fname_1

print("Cleaning up gcode lines...")
time.sleep(1)

gcode_replace(source, fname_2, key3, key4, key5, key6, height, min_retract_disp)

print("Adding M7s, M9s, pauses and comments...")
time.sleep(1)
print("Done")
